import os
import tkinter as tk
from tkinter import filedialog, messagebox
from PyPDF2 import PdfReader, PdfWriter
from reportlab.pdfgen import canvas
from io import BytesIO
from pathlib import Path
import platform
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont

def register_font():
    font_name = "Arial"
    font_path = None

    if platform.system() == "Windows":
        win_font = Path("C:/Windows/Fonts/arial.ttf")
        if win_font.exists():
            font_path = str(win_font)

    if not font_path:
        local_font = Path("DejaVuSans.ttf")
        if local_font.exists():
            font_name = "DejaVuSans"
            font_path = str(local_font)
        else:
            raise FileNotFoundError(
                "–ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π Arial, –Ω–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π DejaVuSans.ttf"
            )

    if font_name not in pdfmetrics.getRegisteredFontNames():
        pdfmetrics.registerFont(TTFont(font_name, font_path))

    return font_name

FONT_USED = register_font()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –Ω–∞–¥–ø–∏—Å—å—é
def create_overlay(text, width, height):
    packet = BytesIO()
    can = canvas.Canvas(packet, pagesize=(width, height))

    # –ü–æ—Ä—Ç—Ä–µ—Ç–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º
    if width <= height:
        can.setFont(FONT_USED, 12)
        can.drawRightString(width - 40, height - 30, text)
    else:
        # –ê–ª—å–±–æ–º–Ω–∞—è ‚Äî –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Ö–æ–ª—Å—Ç –Ω–∞ 90¬∞ –∏ —Å–¥–≤–∏–≥–∞–µ–º –µ–≥–æ
        can.translate(width, 0)
        can.rotate(90)
        can.setFont(FONT_USED, 12)
        # width –∏ height —Ç–µ–ø–µ—Ä—å –ø–æ–º–µ–Ω—è–ª–∏—Å—å –º–µ—Å—Ç–∞–º–∏, –ø–æ—ç—Ç–æ–º—É drawRightString –ø–æ height
        can.drawRightString(height - 40, -30, text)

    can.save()
    packet.seek(0)
    return PdfReader(packet).pages[0]


# –í—Å—Ç–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ PDF
def insert_text_to_pdf(pdf_path, text, save_as_new, prefix):
    reader = PdfReader(pdf_path)
    writer = PdfWriter()

    for page in reader.pages:
        overlay = create_overlay(
            text,
            float(page.mediabox.width),
            float(page.mediabox.height)
        )
        page.merge_page(overlay)
        writer.add_page(page)

    output_path = (
        pdf_path if not save_as_new else os.path.join(
            os.path.dirname(pdf_path),
            f"{prefix}_{os.path.basename(pdf_path)}"
        )
    )

    with open(output_path, "wb") as f:
        writer.write(f)

        
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏
def process_pdfs(save_as_new):
    if not any(file_paths):
        status_var.set("‚ö† –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ PDF-—Ñ–∞–π–ª–∞.")
        return

    any_error = False
    for i in range(4):
        path = file_paths[i]
        if path:
            try:
                text = entries[i].get().strip()
                prefix = f"att.{i+1}"
                insert_text_to_pdf(path, text, save_as_new, prefix)
            except Exception as e:
                any_error = True
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {path}:\n{e}")
                status_var.set(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {os.path.basename(path)}")
    if not any_error:
        status_var.set("‚úÖ PDF-—Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")

# –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞
def select_file(index):
    path = filedialog.askopenfilename(filetypes=[("PDF files", "*.pdf")])
    if path:
        file_paths[index] = path
        file_labels[index].config(text=os.path.basename(path))

def reset_fields():
    for i in range(4):
        default_text = f"Prilog 6.0{i+1} / –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 6.0{i+1}"
        entries[i].delete(0, tk.END)
        entries[i].insert(0, default_text)

        file_paths[i] = None
        file_labels[i].config(text="–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω")

    status_var.set("üîÑ –ü–æ–ª—è —Å–±—Ä–æ—à–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
    
    
# GUI
root = tk.Tk()
root.title("PDF –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
entries = []
file_labels = []
file_paths = [None]*4

for i in range(4):
    frame = tk.Frame(root)
    frame.pack(padx=10, pady=5, fill='x')
    
    entry = tk.Entry(frame, width=35)
    entry.insert(0, f"Prilog 6.0{i+1} / –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 6.0{i+1}")
    entry.pack(side='left')
    entries.append(entry)

    btn = tk.Button(frame, text="–í—ã–±—Ä–∞—Ç—å PDF", command=lambda idx=i: select_file(idx))
    btn.pack(side='left', padx=5)

    label = tk.Label(frame, text="–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω", width=30, anchor='w')
    label.pack(side='left')
    file_labels.append(label)

# –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏ –ø–æ—è—Å–Ω–µ–Ω–∏–π
actions_frame = tk.Frame(root)
actions_frame.pack(padx=10, pady=10, fill='x')

# –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –∫–Ω–æ–ø–∫–∏
btn_frame = tk.Frame(actions_frame)
btn_frame.pack(side='left', padx=(0, 20))

tk.Button(btn_frame, text="üîÑ –í–µ—Ä–Ω—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", width=30,
          command=reset_fields).pack(pady=3)
tk.Button(btn_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ç–æ—Ç –∂–µ —Ñ–∞–π–ª", width=30,
          command=lambda: process_pdfs(save_as_new=False)).pack(pady=3)
tk.Button(btn_frame, text="üìù –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º", width=30,
          command=lambda: process_pdfs(save_as_new=True)).pack(pady=3)

# –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –ø–æ—è—Å–Ω–µ–Ω–∏–µ
info_text = (
    "üìå –ü–æ—è—Å–Ω–µ–Ω–∏—è:\n"
    "üîÑ –í–µ—Ä–Ω—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äì —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –æ—á–∏—â–∞–µ—Ç —Ñ–∞–π–ª—ã.\n"
    "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ç–æ—Ç –∂–µ —Ñ–∞–π–ª ‚Äì –∑–∞–º–µ–Ω—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª PDF.\n"
    "üìù –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º ‚Äì —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–ø–∏—é —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º 'att.X_...'."
)

info_label = tk.Label(actions_frame, text=info_text, justify='left', anchor='nw')
info_label.pack(side='left')

# –°—Ç–∞—Ç—É—Å-–±–∞—Ä
status_var = tk.StringVar()
status_label = tk.Label(root, textvariable=status_var, fg="green", anchor='w', relief="sunken", bd=1)
status_label.pack(fill='x', padx=10, pady=(5, 10))
status_var.set("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

root.mainloop()